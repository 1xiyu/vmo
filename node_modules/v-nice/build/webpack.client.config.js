const path = require('path')
const webpack = require('webpack')
const base = require('./webpack.base.config')
const vueConfig = require('./vue-loader.config')
const HTMLPlugin = require('html-webpack-plugin')
const ExtractTextPlugin = require('extract-text-webpack-plugin')

const config = Object.assign({}, base, {
    resolve: {},
    plugins: (base.plugins || []).concat([
        // strip comments in Vue code
        new webpack.DefinePlugin({
            'process.env': {
                'NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'development')
            }
        }),
        // extract vendor chunks for better caching
        new webpack.optimize.CommonsChunkPlugin({
            async: true,
            name: 'common',
            children: true
        }),
        // generate output HTML
        new HTMLPlugin({
            template: 'src/index.html'
        })
    ])
})

if (process.env.NODE_ENV === 'production') {
    // Use ExtractTextPlugin to extract CSS into a single file
    // so it's applied on initial render.
    // vueConfig is already included in the config via LoaderOptionsPlugin
    // here we overwrite the loader config for <style lang="stylus">
    // so they are extracted.
    vueConfig.loaders = {
        less: ExtractTextPlugin.extract({
            loader: 'css-loader!less-loader',
            fallbackLoader: 'vue-style-loader' // <- this is a dep of vue-loader
        })
    }

    config.output.path = path.resolve(__dirname, '../dist');
    config.output.publicPath = '/dist/';

    config.plugins.push(
        new ExtractTextPlugin('styles.[hash].css'),
        // this is needed in webpack 2 for minifying CSS
        new webpack.LoaderOptionsPlugin({
            minimize: true
        }),
        // minify JS
        new webpack.optimize.UglifyJsPlugin({
            compress: {
                warnings: false
            }
        })
    )
}

module.exports = config
